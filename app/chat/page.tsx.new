"use client";

import React, { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import AppLayout from "@/components/layout/app-layout";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Avatar } from "@/components/ui/avatar";
import { Textarea } from "@/components/ui/textarea";
import { Search, Send, ArrowLeft, Paperclip, User } from "lucide-react";
import { Card } from "@/components/ui/card";
import { auth, db, storage } from "@/lib/firebase";
import { 
  ref, 
  get, 
  set, 
  push, 
  remove, 
  onValue, 
  serverTimestamp as firebaseServerTimestamp 
} from "firebase/database";
import { 
  ref as storageRef, 
  uploadBytes, 
  getDownloadURL 
} from "firebase/storage";
import { useAuthState } from "react-firebase-hooks/auth";
import { formatDistanceToNow } from "date-fns";
import { z } from "zod";

// Types
interface User {
  uid: string;
  username: string;
  displayName: string;
  email: string;
  profileImageUrl?: string;
}

interface Message {
  id: string;
  text: string;
  senderId: string;
  timestamp: number;
  imageUrl?: string;
  read?: Record<string, boolean>;
}

interface Chat {
  id: string;
  participants: Record<string, boolean>;
  lastMessage?: string;
  lastTimestamp?: number;
  unreadCount?: Record<string, number>;
}

export default function ChatPage() {
  const [user] = useAuthState(auth);
  const [chats, setChats] = useState<Chat[]>([]);
  const [selectedChat, setSelectedChat] = useState<string | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [chatUsers, setChatUsers] = useState<Record<string, User>>({});
  const [loading, setLoading] = useState(true);
  const [showSearch, setShowSearch] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState<User[]>([]);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadingImage, setUploadingImage] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const currentUser = user as User;
  
  // Fetch all chats for current user
  useEffect(() => {
    if (!currentUser?.uid) return;
    
    const userChatsRef = ref(db, 'userChats');
    
    const unsubscribe = onValue(userChatsRef, (snapshot) => {
      if (!snapshot.exists()) {
        setChats([]);
        setLoading(false);
        return;
      }

      // Get user details for all participants
      const userDetails: Record<string, User> = {};
      const usersPromises: Promise<void>[] = [];

      Object.entries(snapshot.val()).forEach(([chatId, chatData]: [string, Record<string, unknown>]) => {
        const participants = chatData.participants as Record<string, boolean> || {};
        Object.keys(participants).forEach((userId) => {
          if (userId !== currentUser.uid && !userDetails[userId]) {
            const userPromise = get(ref(db, `users/${userId}`))
              .then((userSnap) => {
                if (userSnap.exists()) {
                  userDetails[userId] = { uid: userId, ...userSnap.val() as Omit<User, 'uid'> };
                }
              })
              .catch(console.error);
            
            usersPromises.push(userPromise);
          }
        });
      });

      // Once we have all user details, we can render the chats
      Promise.all(usersPromises).then(() => {
        const userChats: Chat[] = [];
        
        Object.entries(snapshot.val()).forEach(([chatId, chatData]: [string, Record<string, unknown>]) => {
          const participants = chatData.participants as Record<string, boolean> || {};
          
          // Only include chats where current user is a participant
          if (participants[currentUser.uid]) {
            const otherUserId = Object.keys(participants).find(id => id !== currentUser.uid);
            
            if (otherUserId && userDetails[otherUserId]) {
              userChats.push({
                id: chatId,
                participants: participants,
                lastMessage: chatData.lastMessage as string,
                lastTimestamp: chatData.lastTimestamp as number,
                unreadCount: chatData.unreadCount as Record<string, number>
              });
            }
          }
        });
        
        // Sort chats by last message timestamp
        userChats.sort((a, b) => (b.lastTimestamp || 0) - (a.lastTimestamp || 0));
        
        setChats(userChats);
        setChatUsers(userDetails);
        setLoading(false);
      });
    });
    
    return () => unsubscribe();
  }, [currentUser?.uid]);

  // Fetch messages when selecting a chat
  useEffect(() => {
    if (!selectedChat) return;
    
    const messagesRef = ref(db, `messages/${selectedChat}`);
    
    const unsubscribe = onValue(messagesRef, (snapshot) => {
      if (!snapshot.exists()) {
        setMessages([]);
        return;
      }
      
      const messagesData = snapshot.val();

      const messagesList = Object.keys(messagesData).map((msgId) => ({
        id: msgId,
        ...messagesData[msgId]
      })).sort((a, b) => a.timestamp - b.timestamp);

      setMessages(messagesList);
      
      // Mark messages as read
      Object.entries(messagesData).forEach(([msgId, msgData]: [string, Record<string, unknown>]) => {
        if (msgData.senderId !== currentUser.uid && (!msgData.read || !(msgData.read as Record<string, boolean>)[currentUser.uid])) {
          set(ref(db, `messages/${selectedChat}/${msgId}/read/${currentUser.uid}`), true);
        }
      });

      // Update unread count in the chat
      set(ref(db, `userChats/${selectedChat}/unreadCount/${currentUser.uid}`), 0);
    });

    // Scroll to bottom when messages change
    scrollToBottom();
    
    return () => unsubscribe();
  }, [selectedChat, currentUser?.uid]);
  
  const scrollToBottom = () => {
    setTimeout(() => {
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };
  
  const sendMessage = async () => {
    if (!currentUser || !selectedChat || (!newMessage.trim() && !selectedFile)) return;
    
    try {
      let imageUrl = "";
      
      // Upload image if selected
      if (selectedFile) {
        setUploadingImage(true);
        const imageRef = storageRef(storage, `chat_images/${selectedChat}/${Date.now()}_${selectedFile.name}`);
        const snapshot = await uploadBytes(imageRef, selectedFile);
        imageUrl = await getDownloadURL(snapshot.ref);
        setUploadingImage(false);
        setSelectedFile(null);
      }
      
      // Create new message
      const newMessageRef = push(ref(db, `messages/${selectedChat}`));
      
      // Get other user ID
      const otherUserId = Object.keys(chats.find(chat => chat.id === selectedChat)?.participants || {})
        .find(id => id !== currentUser.uid) || '';
      
      // Set the message data
      await set(newMessageRef, {
        text: newMessage.trim(),
        senderId: currentUser.uid,
        timestamp: Date.now(),
        ...(imageUrl ? { imageUrl } : {}),
        read: {
          [currentUser.uid]: true
        }
      });
      
      // Update last message in chat
      await set(ref(db, `userChats/${selectedChat}/lastMessage`), 
        imageUrl ? "Sent an image" : newMessage.trim()
      );
      
      // Update timestamp
      await set(ref(db, `userChats/${selectedChat}/lastTimestamp`), Date.now());
      
      // Increment unread count for other user
      const unreadCountRef = ref(db, `userChats/${selectedChat}/unreadCount/${otherUserId}`);
      const unreadSnapshot = await get(unreadCountRef);
      const currentCount = unreadSnapshot.exists() ? unreadSnapshot.val() : 0;
      
      await set(unreadCountRef, currentCount + 1);
      
      // Clear input
      setNewMessage("");
      scrollToBottom();
    } catch (error) {
      console.error("Error sending message:", error);
    }
  };
  
  const searchUsers = async (query: string) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }
    
    try {
      // Get all users
      const usersRef = ref(db, 'users');
      const snapshot = await get(usersRef);
      
      if (!snapshot.exists()) {
        setSearchResults([]);
        return;
      }
      
      const usersData = snapshot.val();
      
      // Filter users by username or display name
      const filteredUsers = Object.keys(usersData)
        .filter(uid => uid !== currentUser.uid) // Don't include current user
        .map(uid => ({
          uid,
          ...usersData[uid]
        }))
        .filter(user => 
          user.username?.toLowerCase().includes(query.toLowerCase()) || 
          user.displayName?.toLowerCase().includes(query.toLowerCase())
        );
      
      setSearchResults(filteredUsers);
    } catch (error) {
      console.error("Error searching users:", error);
      setSearchResults([]);
    }
  };
  
  const startChat = async (userId: string) => {
    if (!currentUser || !userId) return;
    
    // Check if chat already exists
    const userChatsRef = ref(db, 'userChats');
    const snapshot = await get(userChatsRef);
    
    if (snapshot.exists()) {
      const chatsData = snapshot.val();
      
      // Look for an existing chat between these two users
      const existingChat = Object.entries(chatsData).find(([_, chatData]) => {
        const participants = chatData.participants || {};
        return Boolean(participants[currentUser.uid]) && Boolean(participants[userId]);
      });

      if (existingChat) {
        setSelectedChat(existingChat[0]);
        setShowSearch(false);
        setSearchQuery("");
        return;
      }
    }
    
    // Create a new chat
    const newChatRef = push(userChatsRef);
    const chatId = newChatRef.key;
    
    await set(newChatRef, {
      participants: {
        [currentUser.uid]: true,
        [userId]: true
      },
      lastTimestamp: Date.now()
    });
    
    setSelectedChat(chatId);
    setShowSearch(false);
    setSearchQuery("");
  };
  
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };
  
  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };
  
  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };
  
  const getOtherUserFromChat = (chat: Chat): User | undefined => {
    const otherUserId = Object.keys(chat.participants).find(id => id !== currentUser.uid);
    return otherUserId ? chatUsers[otherUserId] : undefined;
  };
  
  const formatMessageTime = (timestamp: number): string => {
    return formatDistanceToNow(new Date(timestamp), { addSuffix: true });
  };

  return (
    <AppLayout>
      <div className="flex h-[calc(100vh-4rem)] bg-gray-50 dark:bg-gray-900">
        {/* Chat List */}
        <div className={`w-full md:w-1/3 border-r border-gray-200 dark:border-gray-800 ${selectedChat ? 'hidden md:block' : ''}`}>
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-800">
            <h2 className="text-xl font-semibold">Messages</h2>
            <Button 
              variant="ghost" 
              size="icon" 
              onClick={() => setShowSearch(!showSearch)}
            >
              <Search className="h-5 w-5" />
            </Button>
          </div>
          
          {showSearch ? (
            <div className="p-4">
              <div className="mb-4">
                <Input
                  placeholder="Search users..."
                  value={searchQuery}
                  onChange={(e) => {
                    setSearchQuery(e.target.value);
                    searchUsers(e.target.value);
                  }}
                  className="w-full"
                />
              </div>
              
              <div className="space-y-2">
                {searchResults.map((user) => (
                  <Card 
                    key={user.uid} 
                    className="p-3 flex items-center cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800"
                    onClick={() => startChat(user.uid)}
                  >
                    <Avatar className="h-10 w-10 mr-3">
                      {user.profileImageUrl ? (
                        <img 
                          src={user.profileImageUrl} 
                          alt={user.displayName} 
                          className="h-full w-full object-cover"
                        />
                      ) : (
                        <User className="h-6 w-6" />
                      )}
                    </Avatar>
                    <div>
                      <p className="font-medium">{user.displayName}</p>
                      <p className="text-sm text-gray-500">@{user.username}</p>
                    </div>
                  </Card>
                ))}
                
                {searchQuery && searchResults.length === 0 && (
                  <p className="text-center text-gray-500 my-4">No users found</p>
                )}
              </div>
            </div>
          ) : (
            <div className="overflow-y-auto h-[calc(100%-4rem)]">
              {loading ? (
                <div className="flex justify-center items-center h-full">
                  <p>Loading chats...</p>
                </div>
              ) : chats.length > 0 ? (
                chats.map((chat) => {
                  const otherUser = getOtherUserFromChat(chat);
                  const unreadCount = (chat.unreadCount?.[currentUser.uid] || 0) > 0;
                  
                  return (
                    <div
                      key={chat.id}
                      className={`flex items-center p-4 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800 ${
                        selectedChat === chat.id ? 'bg-gray-100 dark:bg-gray-800' : ''
                      } ${unreadCount ? 'font-semibold' : ''}`}
                      onClick={() => setSelectedChat(chat.id)}
                    >
                      <Avatar className="h-12 w-12 mr-4">
                        {otherUser?.profileImageUrl ? (
                          <img 
                            src={otherUser.profileImageUrl} 
                            alt={otherUser.displayName} 
                            className="h-full w-full object-cover"
                          />
                        ) : (
                          <User className="h-6 w-6" />
                        )}
                      </Avatar>
                      <div className="flex-1 min-w-0">
                        <div className="flex justify-between items-baseline">
                          <p className="truncate font-medium">{otherUser?.displayName || 'Unknown User'}</p>
                          {chat.lastTimestamp && (
                            <span className="text-xs text-gray-500">
                              {formatDistanceToNow(new Date(chat.lastTimestamp), { addSuffix: false })}
                            </span>
                          )}
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-400 truncate">
                          {chat.lastMessage || 'Start a conversation'}
                        </p>
                      </div>
                      {chat.unreadCount && chat.unreadCount[currentUser.uid] > 0 && (
                        <span className="ml-2 bg-blue-600 text-white rounded-full text-xs px-2 py-1">
                          {chat.unreadCount[currentUser.uid]}
                        </span>
                      )}
                    </div>
                  );
                })
              ) : (
                <div className="flex flex-col justify-center items-center h-full p-4 text-center">
                  <p className="text-gray-500 mb-4">No messages yet</p>
                  <Button onClick={() => setShowSearch(true)}>
                    Start a conversation
                  </Button>
                </div>
              )}
            </div>
          )}
        </div>
        
        {/* Chat Messages */}
        {selectedChat ? (
          <div className="flex flex-col w-full md:w-2/3 h-full">
            {/* Chat Header */}
            <div className="flex items-center p-4 border-b border-gray-200 dark:border-gray-800">
              <Button
                variant="ghost"
                size="icon"
                className="md:hidden mr-2"
                onClick={() => setSelectedChat(null)}
              >
                <ArrowLeft className="h-5 w-5" />
              </Button>
              
              {(() => {
                const chat = chats.find((c) => c.id === selectedChat);
                if (!chat) return <p>Loading...</p>;
                
                const otherUser = getOtherUserFromChat(chat);
                return (
                  <div className="flex items-center">
                    <Avatar className="h-10 w-10 mr-3">
                      {otherUser?.profileImageUrl ? (
                        <img 
                          src={otherUser.profileImageUrl} 
                          alt={otherUser.displayName} 
                          className="h-full w-full object-cover"
                        />
                      ) : (
                        <User className="h-6 w-6" />
                      )}
                    </Avatar>
                    <div>
                      <p className="font-medium">{otherUser?.displayName || 'Unknown User'}</p>
                      <p className="text-sm text-gray-500">@{otherUser?.username}</p>
                    </div>
                  </div>
                );
              })()}
            </div>
            
            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.length > 0 ? (
                messages.map((message) => {
                  const isCurrentUser = message.senderId === currentUser.uid;
                  return (
                    <div
                      key={message.id}
                      className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-[70%] p-3 rounded-lg ${
                          isCurrentUser
                            ? 'bg-blue-600 text-white rounded-br-none'
                            : 'bg-gray-200 dark:bg-gray-800 rounded-bl-none'
                        }`}
                      >
                        {message.imageUrl && (
                          <img
                            src={message.imageUrl}
                            alt="Message attachment"
                            className="rounded-lg mb-2 max-h-60 object-contain"
                          />
                        )}
                        {message.text && <p>{message.text}</p>}
                        <div className="text-xs mt-1 text-right">
                          {formatMessageTime(message.timestamp)}
                          {isCurrentUser && message.read && Object.keys(message.read).length > 1 && (
                            <span className="ml-1">✓</span>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })
              ) : (
                <div className="flex justify-center items-center h-full">
                  <p className="text-gray-500">Start a conversation</p>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
            
            {/* Message Input */}
            <div className="p-4 border-t border-gray-200 dark:border-gray-800">
              {selectedFile && (
                <div className="mb-2 p-2 bg-gray-100 dark:bg-gray-800 rounded flex items-center">
                  <p className="text-sm flex-1 truncate">{selectedFile.name}</p>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={() => setSelectedFile(null)}
                    className="ml-2"
                  >
                    &times;
                  </Button>
                </div>
              )}
              
              <div className="flex items-end">
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="h-10 w-10"
                  onClick={triggerFileInput}
                >
                  <Paperclip className="h-5 w-5" />
                </Button>
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleFileSelect}
                  accept="image/*"
                  className="hidden"
                />
                
                <Textarea
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  onKeyDown={handleKeyPress}
                  placeholder="Type a message..."
                  className="min-h-[50px] max-h-[150px] flex-1 mx-2 resize-none"
                />
                
                <Button
                  type="button"
                  onClick={sendMessage}
                  className="h-10 w-10"
                  variant="ghost"
                  size="icon"
                  disabled={(!newMessage.trim() && !selectedFile) || uploadingImage}
                >
                  <Send className="h-5 w-5" />
                </Button>
              </div>
            </div>
          </div>
        ) : (
          <div className="hidden md:flex flex-col justify-center items-center w-2/3 h-full p-4 text-center">
            <p className="text-xl mb-2">Select a conversation</p>
            <p className="text-gray-500">Choose a contact from the list to start chatting</p>
          </div>
        )}
      </div>
    </AppLayout>
  );
}
